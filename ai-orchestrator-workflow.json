{
  "name": "AI Agent Orchestrator (fixed wiring)",
  "nodes": [
    {
      "parameters": { "path": "build-project", "httpMethod": "POST", "responseMode": "onReceived" },
      "id": "webhook-1",
      "name": "Build Project Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": { "jsCode": "if(!$json.project_data){throw new Error('project_data missing');} return [{json:$json}];" },
      "id": "validate-1",
      "name": "Validate Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": { "jsCode": "const out={...$json,projectId:'proj_'+Date.now()}; return [{json:out}];" },
      "id": "create-1",
      "name": "Create Project Record",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {},
      "id": "errTrig-1",
      "name": "On Error",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [240, 40]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/agent/requirements",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { project_data: $json } }}"
      },
      "id": "req-1",
      "name": "Requirements Analyzer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 120]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/agent/architecture",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { requirements: $json } }}"
      },
      "id": "arch-1",
      "name": "Architecture Designer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/agent/tech-evaluator",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { requirements: $json } }}"
      },
      "id": "tech-1",
      "name": "Tech Stack Evaluator",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 480]
    },
    {
      "parameters": {
        "jsCode": "const results=$input.all().map(i=>i.json); return [{json:{final_architecture:results,projectId:$json.projectId}}];"
      },
      "id": "merge-arch-1",
      "name": "Merge Architecture Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1140, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/agent/backend",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { architecture: $json.final_architecture, projectId: $json.projectId } }}"
      },
      "id": "back-1",
      "name": "Backend Generator",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1360, 180]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/agent/frontend",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { architecture: $json.final_architecture, projectId: $json.projectId } }}"
      },
      "id": "front-1",
      "name": "Frontend Generator",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1360, 420]
    },
    {
      "parameters": { "jsCode": "const merged=$input.all().map(i=>i.json); return [{json:{merged_code:merged,projectId:$json.projectId}}];" },
      "id": "merge-code-1",
      "name": "Merge Codes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1580, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/agent/testing",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { generated_code: $json.merged_code, projectId: $json.projectId } }}"
      },
      "id": "test-1",
      "name": "Testing Engine",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/agent/deployment",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { project_data: $json } }}"
      },
      "id": "deploy-1",
      "name": "Deployment Manager",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2020, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/api/projects/update-status",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { project_id: $json.projectId, status: 'completed' } }}"
      },
      "id": "status-ok-1",
      "name": "Update Project Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2240, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/api/projects/update-status",
        "sendBody": true,
        "jsonParameters": true,
        "jsonBody": "={{ { project_id: $items('Create Project Record')[0].json.projectId, status: 'failed' } }}"
      },
      "id": "status-fail-1",
      "name": "Update Project Status (Failed)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [460, 40]
    }
  ],
  "connections": {
    "Build Project Webhook": { "main": [[{ "node": "Validate Request", "type": "main", "index": 0 }]] },
    "Validate Request": { "main": [[{ "node": "Create Project Record", "type": "main", "index": 0 }]] },

    /* fan-out from Create Project Record (all from output 0) */
    "Create Project Record": {
      "main": [[
        { "node": "Requirements Analyzer", "type": "main", "index": 0 },
        { "node": "Architecture Designer", "type": "main", "index": 0 },
        { "node": "Tech Stack Evaluator", "type": "main", "index": 0 }
      ]]
    },

    /* all three feed the same input (index 0) of Merge Architecture Results */
    "Requirements Analyzer": { "main": [[{ "node": "Merge Architecture Results", "type": "main", "index": 0 }]] },
    "Architecture Designer": { "main": [[{ "node": "Merge Architecture Results", "type": "main", "index": 0 }]] },
    "Tech Stack Evaluator": { "main": [[{ "node": "Merge Architecture Results", "type": "main", "index": 0 }]] },

    /* split to backend + frontend from the same output 0 */
    "Merge Architecture Results": {
      "main": [[
        { "node": "Backend Generator", "type": "main", "index": 0 },
        { "node": "Frontend Generator", "type": "main", "index": 0 }
      ]]
    },

    /* both feed Merge Codes on input 0 */
    "Backend Generator": { "main": [[{ "node": "Merge Codes", "type": "main", "index": 0 }]] },
    "Frontend Generator": { "main": [[{ "node": "Merge Codes", "type": "main", "index": 0 }]] },

    "Merge Codes": { "main": [[{ "node": "Testing Engine", "type": "main", "index": 0 }]] },
    "Testing Engine": { "main": [[{ "node": "Deployment Manager", "type": "main", "index": 0 }]] },
    "Deployment Manager": { "main": [[{ "node": "Update Project Status", "type": "main", "index": 0 }]] },

    /* error path */
    "On Error": { "main": [[{ "node": "Update Project Status (Failed)", "type": "main", "index": 0 }]] }
  },
  "pinData": {}
}
